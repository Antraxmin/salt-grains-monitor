name: Deploy to Salt Master

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Validate YAML files
      run: |
        python3 -c "
        import yaml, os, sys
        error_count = 0
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.sls'):
                    path = os.path.join(root, file)
                    try:
                        with open(path, 'r') as f:
                            content = f.read()
                            if '{%' in content or '{{' in content:
                                print(f'⚠️  {path} - Jinja2 template (basic check only)')
                                if content.count('{%') != content.count('%}'):
                                    raise Exception('Unmatched Jinja2 template tags')
                                if content.count('{{') != content.count('}}'):
                                    raise Exception('Unmatched Jinja2 variable tags')
                            else:
                                yaml.safe_load(content)
                                print(f'✅ {path}')
                    except Exception as e:
                        print(f'❌ {path} - ERROR: {e}')
                        error_count += 1
        if error_count > 0:
            sys.exit(1)
        "
    
    - name: Set deployment target
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          echo "DEPLOY_PATH=/opt/salt-grains-monitor" >> $GITHUB_ENV
        else
          echo "DEPLOY_ENV=development" >> $GITHUB_ENV
          echo "DEPLOY_PATH=/opt/salt-grains-monitor-dev" >> $GITHUB_ENV
        fi
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SALT_MASTER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "${{ secrets.SALT_MASTER_HOST }}" >> ~/.ssh/known_hosts
        
    - name: Deploy
      run: |
        # 환경별로 분리된 백업 진행 + 디렉토리 생성
        ssh -i ~/.ssh/id_rsa "${{ secrets.SALT_MASTER_USER }}"@"${{ secrets.SALT_MASTER_HOST }}" \
          "sudo mkdir -p /srv/backup/\$(date +%Y%m%d_%H%M%S) && \
           sudo cp -r /srv/salt /srv/backup/\$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || true && \
           sudo mkdir -p ${{ env.DEPLOY_PATH }} /srv/salt /srv/pillar && \
           sudo chown \$(whoami):\$(whoami) ${{ env.DEPLOY_PATH }}"
        
        # 프로젝트 파일 동기화
        rsync -az --delete -e "ssh -i ~/.ssh/id_rsa" \
          --exclude='.git*' --exclude='README.md' \
          ./ "${{ secrets.SALT_MASTER_USER }}"@"${{ secrets.SALT_MASTER_HOST }}":${{ env.DEPLOY_PATH }}/
        
        # Salt 설정 적용 (main 브랜치에서만 실제 배포 진행)
        ssh -i ~/.ssh/id_rsa "${{ secrets.SALT_MASTER_USER }}"@"${{ secrets.SALT_MASTER_HOST }}" << 'EOF'
          cd ${{ env.DEPLOY_PATH }}
          
          if [ "${{ env.DEPLOY_ENV }}" == "production" ]; then
            # 운영환경 배포
            [ -d "srv/salt" ] && sudo rsync -av srv/salt/ /srv/salt/
            [ -d "srv/pillar" ] && sudo rsync -av srv/pillar/ /srv/pillar/
            [ -d "srv/reactor" ] && sudo rsync -av srv/reactor/ /srv/reactor/
            
            # 권한 설정
            sudo chown -R root:root /srv
            sudo find /srv -type f -exec chmod 644 {} \;
            sudo find /srv -type d -exec chmod 755 {} \;
            
            # Salt Master 재시작 + 테스트
            sudo systemctl reload salt-master
            sleep 5
            timeout 30 sudo salt '*' test.ping && timeout 60 sudo salt '*' state.apply grains-monitor || true
          else
            echo "개발 환경에서의 파일 동기화가 완료되었습니다. 실제 운영환경에는 적용되지 않습니다."
            echo "수동으로 테스트하려면 sudo salt '*' state.apply grains-monitor test=True 명령을 사용하세요."
          fi
        EOF
        
    - name: Notify result
      if: always()
      run: |
        if [ "${{ secrets.DOORAY_WEBHOOK }}" != "" ]; then
          STATUS=$([ "${{ job.status }}" == "success" ] && echo "✅ 성공" || echo "❌ 실패")
          ENV_MSG=$([ "${{ env.DEPLOY_ENV }}" == "production" ] && echo "운영환경" || echo "개발환경")
          curl -X POST "${{ secrets.DOORAY_WEBHOOK }}" \
            -H 'Content-type: application/json' \
            --data "{\"text\": \"Salt Grains Monitor 배포 $STATUS ($ENV_MSG)\n브랜치: ${{ github.ref_name }}\n커밋: \`${{ github.sha }}\`\n시간: $(date)\"}" || true
        fi